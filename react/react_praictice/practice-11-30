

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script crossorigin src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <title>Document</title>
</head>

<body>
    <div id="root"></div>
    <script type="text/babel">

      
        // API 키 설정하기


                    const weatherIcons = {
                Clear: '☀️',
                Clouds: '☁️',
                Rain: '🌧️',
                Snow: '❄️',
                Mist: '🌫️',
                Drizzle: '🌦️',
                Thunderstorm: '⛈️'
            };

        
        const { useEffect, useState } = React;
        // useEffect, useState hook가져오기
        // !!!---'user'가 아니라 'use'임 그만 잘못쓰기---!!!!


        function Weather() {
            //함수형 컴포넌트 선언

            const [position, setPosition] = useState({});
            const [cityName, setCityName] = useState('');
            const [weather, setWeather] = useState({});
            const [wind, setWind] = useState({});
            const [imgUrl, setImgUrl] = useState('');
            const [imgName, setImgName] = useState('');
            const weatherIcons = {
                Clear: 'sunny',
                Clouds: 'cloud',
                Rain: 'droplet',
                Snow: 'snowman',
                Mist: 'foggy',
                Drizzle: 'umbrella',
                Thunderstorm: 'zap'
                // 아이콘 이름이 없는게 있어서 임의로 작성
            };
            // 날씨와 이모티콘에 필요한 객체 정의
            // 필요한 객체를 미리 정리하고 api를 가져오든 api를 연결하고 필요한 객체를 선언하든 자기마음임


            useEffect(
                //마운트 시에 실행
                () => {
                    new Promise((resolve, reject) => {
                        // 비동기 작업을 순차적으로 하고싶을때 Promise사용

                        navigator.geolocation.getCurrentPosition(currentPosition => {

                            setPosition({
                                longitude: currentPosition.coords.longitude,
                                latitude: currentPosition.coords.latitude
                            })

                            resolve(currentPosition.coords);
                            // resolve는 Promise가 성공 했을때 reject는 실패했을때 오류를 잡으려고 사용
                            console.log(currentPosition.coords)
                        });
                    }).then(coords => {

                        fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${coords.latitude}&lon=${coords.longitude}&appid=${API_KEY}`)
                        // 네트워트에 요청 보내기
                            .then(response => response.json())
                            .then(json => {
                                setCityName(json.name);
                                console.log(json.weather)
                                setWeather(json.weather[0]);
                                setWind(json.wind);
                                // setImgUrl(json.weather[0].main)
                                // console.log(json.weather[0].main)
                                // setImgName(json.weather[0].main)

                                // axios.get('https://api.github.com/emojis')
                                //     .then(res => {
                                //         setImgUrl(res.data[imgName])
                                //         console.log(res.data)

                                const imgIcon = json.weather[0].main;
                                // 현재 날씨의 이름
                                const iconName = weatherIcons[imgIcon] || 'question';
                                // 날씨 아이콘이 없으면 물음표 이모티콘 나오게

                                console.log("iconName")
                                console.log(iconName)
                                axios.get('https://api.github.com/emojis')
                                    .then(res => {
                                        setImgUrl(res.data[iconName]);
                                        //api중에 현재 날씨의 이름을 가지고 있는 아이콘을 url로 설정

                                    });
                            });

                            //응답 처리
                    });
                },
                [] //첫 마운트 시에만 작동하도록 빈배열 설정
            );

            return (
                <>
                    <h3>현재 위치</h3>
                    <h4>{`경도 : ${position.latitude} 위도 : ${position.longitude}`}</h4>
                    <h4>{`조회도시 : ${cityName}`}</h4>
                    <h4>{`날씨 : ${weather.main} 날씨 설명 : ${weather.description}`}</h4>
                    <h4>{`풍향 : ${wind.deg}도 풍속 : ${wind.speed}m/s`}</h4>
                    <img src={imgUrl} />
                </>
            )
            //App에 들고갈 리턴 값
        }


        function App() {

            return (
                <>
                    <h1>오늘의 날씨</h1>
                    <Weather />
                    <br/>
                </>
            );
            // 화면에 실제로 보여질 부분
        }

        ReactDOM.createRoot(document.getElementById('root')).render(<App/>);
        // App을 root에 추가
    </script>
</body>

</html>
